<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Guidance Magento Team <magento@guidance.com>
  - Copyright (c) 2018 Guidance Solutions (http://www.guidance.com)
  -->

<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
    <type name="Magento\Webapi\Controller\Rest">
        <plugin name="logger" type="Guidance\WebapiLogging\Plugin\Controller\Logger"/>
    </type>
    <type name="Guidance\WebapiLogging\Plugin\Controller\Logger">
        <arguments>
            <argument name="logger" xsi:type="object">fileDbLogger</argument>
            <argument name="requestFilter" xsi:type="object">Guidance\WebapiLogging\Model\RegExpRequestFilter</argument>
        </arguments>
    </type>
    <!--
        You can define similar virtual type for logger with requred handlers
        and pass it to Guidance\WebapiLogging\Plugin\Controller\Logger $logger constructor argument.
    -->
    <virtualType name="fileDbLogger" type="Monolog\Logger">
        <arguments>
            <argument name="name" xsi:type="string">main</argument>
            <argument name="handlers"  xsi:type="array">
                <item name="0" xsi:type="object">Guidance\WebapiLogging\Model\Logger\FileHandler</item>
                <item name="1" xsi:type="object">Guidance\WebapiLogging\Model\Logger\DbHandler</item>
            </argument>
        </arguments>
    </virtualType>
    <type name="Guidance\WebapiLogging\Model\RegExpRequestFilter">
        <arguments>
            <argument name="mode" xsi:type="const">Guidance\WebapiLogging\Model\RegExpRequestFilter::MODE_BLACKLIST</argument>
            <!--
                Define exact filters in project specific DI with following argument:

                <argument name="filterRegExps" xsi:type="array">
                    <item name="only-dev" xsi:type="string">|Host\: foo\.bar\.guidevops\.com|</item>
                </argument>
            -->
        </arguments>
    </type>
    <type name="Guidance\WebapiLogging\Model\Formatter\PrivateDataFilter">
        <arguments>
            <!--
                List of regular expressions for masking. Please don't miss / characters.
            -->
            <argument name="maskPatterns" xsi:type="array">
                <item name="integration token password" xsi:type="string">/"password"\s*\:\s*"([^"]*)"/</item>
                <item name="auth token" xsi:type="string">/"(\w{32})"/</item>
                <item name="credit card number" xsi:type="string">/"(\d{12})\d{4}"/</item>
                <item name="cvv" xsi:type="string">/"cc_cid"\s*\:\s*"(\d+)"/</item>
                <item name="api key mask" xsi:type="string">/Authorization\: Bearer (\w+)/</item>
            </argument>
        </arguments>
    </type>
    <type name="Guidance\WebapiLogging\Model\Logger\FileHandler">
        <arguments>
            <argument name="formatter" xsi:type="object">requestFileFormatter</argument>
        </arguments>
    </type>
    <type name="Guidance\WebapiLogging\Model\Logger\DbHandler">
        <arguments>
            <argument name="formatter" xsi:type="object">Guidance\WebapiLogging\Model\Formatter\PrivateDataFilter</argument>
        </arguments>
    </type>
    <virtualType name="lineFormatterWithBreaks" type="Monolog\Formatter\LineFormatter">
        <arguments>
            <argument name="allowInlineLineBreaks" xsi:type="boolean">true</argument>
        </arguments>
    </virtualType>
    <virtualType name="requestFileFormatter" type="Guidance\WebapiLogging\Model\Formatter\Chain">
        <arguments>
            <argument name="formatters" xsi:type="array">
                <item name="private" xsi:type="object">Guidance\WebapiLogging\Model\Formatter\PrivateDataFilter</item>
                <item name="request" xsi:type="object">Guidance\WebapiLogging\Model\Formatter\RequestFileFormatter</item>
                <item name="line" xsi:type="object">lineFormatterWithBreaks</item>
            </argument>
        </arguments>
    </virtualType>
</config>